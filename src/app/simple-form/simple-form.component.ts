import { Component, OnInit, Input, Output, EventEmitter } from "@angular/core";

@Component({
  selector: "app-simple-form",
  template: `
    <!-- access fields onthe class and display them -->
    <div>{{ hello }}</div>
    <div>{{ message }}</div>
    <!-- #myInput is ref to the input -->
    <!-- [()] syntax provides a two way binding - this was the internal value is set to what's provided but changing it in the input also changes the external value. Whether changed inside the input, or outside the input, the internal and external values are bound so the both change -->
    <!-- square brackets evaluates the right side (in quotes) -->
    <!-- [ngClass] applies the classes (object) provided. (mousedown) gets called when we click inside the box -->
    <input
      #myInput
      type="text"
      [(ngModel)]="message"
      [ngClass]="{ mousedown: isMouseDown }"
      (mousedown)="isMouseDown = true"
      (mouseup)="isMouseDown = false"
      (mouseleave)="isMouseDown = false"
    />

    <!-- (click) specifies the event handler -->
    <!-- onClick(myInput.value) allows us to get the value of the input 'myInput' since myInput is the reference to <input> -->
    <!-- onClick($event) gives us access to mouse events. event gets passed to the handler function -->
    <!-- (mouseover) calls the event handler when we drag the mouse over the button -->
    <button
      (mouseover)="onMouseOver($event)"
      (click)="update.emit({ text: message })"
    >
      click me
    </button>
  `,
  // styles defined inside component are isolated to that compnent (*).
  styles: [
    `
      .mousedown {
        border: 8px solid green;
      }
      * {
        font-size: 20px;
      }
      :host {
        display: flex;
        flex-direction: column;
      }
    `,
  ],
})
export class SimpleFormComponent implements OnInit {
  hello: string;
  isMouseDown: boolean = false;
  @Input() message: string; // each element takes an input
  // update is an event emitter which can be bound to by
  // external components. This allows for changes
  // generated inside this component to be seen by external components
  // in this example we bind to events generated by children in the parent
  @Output() update = new EventEmitter();

  onMouseOver(event: MouseEvent) {
    console.log(event);
  }

  onClick(event: MouseEvent, value: string) {
    console.log(event);
    console.log(value);
  }

  constructor() {}

  ngOnInit() {
    // set the field when the component is initialized which then gets displayed
    this.hello = "hello world!";
  }
}
